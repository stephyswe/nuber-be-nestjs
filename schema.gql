# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  countRestaurants: Int!
  coverImg: String
  name: String!
  restaurants: [Restaurant!]
  slug: String!
}

input CategoryInput {
  page: Int = 1
  slug: String!
}

type CategoryOutput {
  category: Category
  error: String
  ok: Boolean!
  restaurants: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

input CreateAccountInput {
  data: CreateAccountInputType!
}

input CreateAccountInputType {
  email: String!
  password: String!
  role: String!
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
}

input CreateDishInput {
  description: String
  name: String!
  options: [DishOptionInputType!]
  price: Int
  restaurantId: Int!
}

type CreateDishOutput {
  dish: Dish!
  error: String
  ok: Boolean!
}

input CreateOrderInput {
  items: [CreateOrderItemInput!]!
  restaurantId: Int!
}

input CreateOrderItemInput {
  dishId: Int!
  options: [OrderItemOptionInputType!]
}

type CreateOrderOutput {
  error: String
  ok: Boolean!
}

input CreateRestaurantInput {
  address: String!
  categoryName: String!
  coverImg: String
  name: String!
}

type CreateRestaurantOutput {
  error: String
  ok: Boolean!
}

input DeleteDishInput {
  dishId: Int!
}

type DeleteDishOutput {
  error: String
  ok: Boolean!
}

input DeleteRestaurantInput {
  restaurantId: Float!
}

type DeleteRestaurantOutput {
  error: String
  ok: Boolean!
}

type Dish {
  description: String
  name: String!
  options: [DishOption!]
  photo: String
  price: Int
  restaurant: Restaurant
}

type DishChoice {
  extra: Int
  name: String!
}

input DishChoiceInputType {
  extra: Int
  name: String!
}

type DishOption {
  choices: [DishChoice!]
  extra: Int
  name: String!
}

input DishOptionInputType {
  choices: [DishChoiceInputType!]
  extra: Int
  name: String!
}

input EditDishInput {
  description: String
  dishId: Float!
  name: String
  options: [DishOptionInputType!]
  photo: String
  price: Int
}

type EditDishOutput {
  error: String
  ok: Boolean!
}

input EditProfileInputArgs {
  email: String!
  verified: Boolean
}

type EditProfileOutput {
  error: String
  ok: Boolean!
}

type FindManyCategoriesOutput {
  categories: [Category!]
  error: String
  ok: Boolean!
}

type FindManyDishesOutput {
  error: String
  ok: Boolean!
  results: [Dish!]!
}

input FindManyOrdersInput {
  status: OrderStatus
}

type FindManyOrdersOutput {
  error: String
  ok: Boolean!
  orders: [Order!]
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  createDish(input: CreateDishInput!): CreateDishOutput!
  createOrder(input: CreateOrderInput!): CreateOrderOutput!
  createRestaurant(createRestaurantDto: CreateRestaurantInput!): CreateRestaurantOutput!
  deleteDish(input: DeleteDishInput!): DeleteDishOutput!
  deleteRestaurant(input: DeleteRestaurantInput!): DeleteRestaurantOutput!
  editProfile(input: EditProfileInputArgs!): EditProfileOutput!
  login(input: LoginInput!): LoginOutput!
  updateDish(input: EditDishInput!): EditDishOutput!
  updateRestaurant(input: UpdateRestaurantInput!): UpdateRestaurantOutput!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailOutput!
}

type Order {
  customer: User
  driver: User
  items: [OrderItem!]
  restaurant: Restaurant
  status: String
  total: Float
}

type OrderItem {
  dish: Dish!
  options: [OrderItemOption!]
}

type OrderItemOption {
  choice: String
  name: String!
}

input OrderItemOptionInputType {
  choice: String
  name: String!
}

enum OrderStatus {
  Cooking
  Delivered
  Pending
  PickedUp
}

type Query {
  findCategoryBySlug(input: CategoryInput!): CategoryOutput!
  findManyCategories: FindManyCategoriesOutput!
  findManyDishes: FindManyDishesOutput!
  findManyOrders(input: FindManyOrdersInput!): FindManyOrdersOutput!
  findManyRestaurants(input: RestaurantsInput!): RestaurantsOutput!
  findRestaurant(input: RestaurantInput!): RestaurantOutput!
  me: User!
  searchRestaurant(input: SearchRestaurantInput!): SearchRestaurantOutput!
  userProfile(userId: Float!): UserProfileOutput!
}

type Restaurant {
  address: String!
  category: Category
  coverImg: String
  id: Float!
  menu: [Dish!]!
  name: String!
  orders: [Order!]!
  owner: User
}

input RestaurantInput {
  restaurantId: Int!
}

type RestaurantOutput {
  error: String
  ok: Boolean!
  results: Restaurant
}

input RestaurantsInput {
  page: Int = 1
}

type RestaurantsOutput {
  error: String
  ok: Boolean!
  results: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

input SearchRestaurantInput {
  page: Int = 1
  query: String!
}

type SearchRestaurantOutput {
  error: String
  ok: Boolean!
  results: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

input UpdateRestaurantInput {
  address: String
  categoryName: String
  coverImg: String
  name: String
  restaurantId: Float!
}

type UpdateRestaurantOutput {
  error: String
  ok: Boolean!
}

type User {
  email: String!
  orders: [Order!]!
  password: String!
  restaurants: [Restaurant!]!
  rides: [Order!]!
  role: String!
  verified: Boolean
}

type UserProfileOutput {
  error: String
  ok: Boolean!
  user: User
}

input VerifyEmailInput {
  code: String!
}

type VerifyEmailOutput {
  error: String
  ok: Boolean!
}